Проверка результатов из консоли базы данных
sqlite3 data/found_channels.db "SELECT COUNT(*) FROM channels;"

Мои ключевики:

Русские:
дешевые авиабилеты, авиабилеты дешево, горящие авиабилеты, скидки на авиабилеты, авиабилеты акции, дешевые билеты, лоукост билеты, билеты со скидкой, распродажа авиабилетов, рейсы за копейки

дешево летать, акционные билеты, дешевые перелёты, горящие туры, бюджетные путешествия, last minute авиабилеты, скидки на перелёты, дешевые рейсы, авиасейлз билеты, авиабилеты распродажа

Украинские:
дешеві авіаквитки, авіаквитки дешево, гарячі авіаквитки, знижки на авіаквитки, лоукост авіаквитки, дешеві перельоти, акція авіаквитки, розпродаж квитків, подорожуй дешево, гарячі тури

бюджетні перельоти, дешеві рейси, last minute квитки, знижки на перельоти, авіаквитки акція, лоукост квитки, промо квитки, дешеві подорожі, гарячі авіа, travel cheap ua

Английские:
cheap flights, flight deals, airfare deals, lowcost flights, budget flights, cheap airfare, last minute flights, weekend flight deals, error fares, glitch fares

ryanair deals, wizzair cheap, easyjet sale, eurowings promo, vueling lowcost, pegasus deals, airasia sale, flydubai cheap flights, frontier deals, spirit airlines sale

Смешанная строка:
дешевые авиабилеты, cheap flights, дешеві авіаквитки, flight deals, авиабилеты акции, знижки на авіаквитки, lowcost flights, лоукост квитки, горящие авиабилеты, ryanair deals



Вся последовательность команд!

1. Открываем терминал и заходим в проект
cd C:\Users\tzvan\Desktop\tg_farm_full

2. Активируем виртуальное окружение
.\.venv\Scripts\activate

3. Гоним cli.py для выгрузки каналов по ключевикам
python cli.py

Скрипт ищет до 100 чатов на каждое слово и добавляет в data\found_channels.db

Повтори с разными ключевиками, пока база не станет толстой.

Проверить, сколько строк:
python -c "import sqlite3, sys; db=sqlite3.connect('data/found_channels.db'); print(db.execute('select count(*) from channels').fetchone()[0])"

4. Отмечаем, где можно писать (group / comment)
python core\tag_channels.py

Снова введёшь номер, ID, HASH. Скрипт к каждому юзернейму добавит поле type.
После завершения в базе будут только реальные статусы: group, comment, channel, dead.

5. Пробуем отослать одно-единственное сообщение
python core\chatter.py

Если всё ок, увидишь в консоли:
→ Пишу в @какой-то-группе
✔ Привет! Лечу Ryanair за копейки через @ryanair_deals_bot ✈️

Если вылезет «Нет новых групп» — база пуста либо все уже отмечены как channel/dead. Значит нужно ещё ключевиков (повторяй шаг 2).

6. Запускаем постоянное расписание
python run_scheduler.py

python run_scheduler.py

Окно оставляешь открытым. С этого момента:

С 09:00 до 24:00 по Киеву

Каждые 30 минут

Скрипт выбирает первую подходящую группу (group или comment, где last_post старше суток), генерит GPT-сообщение, отправляет, записывает время.

Остановка — Ctrl + C.

7. Когда база обнулилась (всё обработано)
Просто запускаешь cli.py снова с новой пачкой ключей, потом (один раз) tag_channels.py, и расписание продолжит работать с новыми группами.

Как это выглядит вживую
Первый цикл

python cli.py — наполнил базу.

python tag_channels.py — проставил типы.

python run_scheduler.py — запустил мотор и ОСТАВИЛ окно открытым. Бот шлёт сообщения каждые 30 минут.

Прошло время, группы кончились, выгрузил новые ключи

Нажимаешь Ctrl + C в окне scheduler-а → мотор остановился.

Снова python cli.py — докачал базу новыми каналами.

python tag_channels.py — пометил свежие каналы.

Снова python run_scheduler.py — запускаешь мотор заново, чтобы он начал обрабатывать новые группы.

Если мотор ещё работает (окно с run_scheduler.py не закрывал)
— останавливать его не нужно: просто наполняй базу (cli.py → tag_channels.py) в другом терминале. Мотор сам увидит новые «group/comment» и переключится на них при следующем тике.

Итого:

cli.py — каждый раз, когда хочешь накачать новые каналы.

tag_channels.py — один раз после каждой новой выгрузки.

run_scheduler.py — держишь запущенным постоянно; перезапускаешь только если останавливал


Теперь бот автоматически доклеивает «\u2060#x9f» к каждому комменту.
В TG-поиске набираешь #x9f — и мгновенно видишь все свои сообщения.

Команды ГитХаб:
git add .
git commit -m "Сообщение о том, что изменилось"
git push
