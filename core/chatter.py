"""
–ë–æ—Ç-¬´—Ñ–µ—Ä–º–∞¬ª: –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –ø–∏—à–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø–æ–º–µ—á–∞–µ—Ç –∏—Ö
–Ω–µ–≤–∏–¥–∏–º—ã–º –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º –ª–µ–≥–∫–æ –∏—Å–∫–∞—Ç—å.
"""

import os, json, sqlite3, asyncio, random, logging
from datetime import datetime, timedelta
from pathlib import Path

import pytz
from dotenv import load_dotenv
import openai
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import ChatWriteForbiddenError, ChatAdminRequiredError
from telethon.tl.functions.channels import JoinChannelRequest

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
KYIV           = pytz.timezone("Europe/Kyiv")

ROOT      = Path(__file__).resolve().parent.parent      # /app
SESS_DIR  = Path(os.getenv("SESS_DIR", ROOT / "sessions"))
SESS_DIR.mkdir(parents=True, exist_ok=True)

DB_PATH   = ROOT / "data" / "found_channels.db"
WATERMARK = "\u2060#x9f"   # –Ω–µ–≤–∏–¥–∏–º—ã–π —Ç–µ–≥

PROMPT_SYSTEM = (
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –æ–±–æ–∂–∞–µ—à—å –¥–µ—à—ë–≤—ã–µ –ø–µ—Ä–µ–ª—ë—Ç—ã –∏ –¥–µ–ª–∏—à—å—Å—è "
    "–ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –≤ —á–∞—Ç–∞—Ö."
)
PROMPT_USER = (
    "–ù–∞–ø–∏—à–∏ –¥–æ 30 —Å–ª–æ–≤ –æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∞–≤–∏–∞–ø–µ—Ä–µ–ª—ë—Ç–∞—Ö. –£–ø–æ–º—è–Ω–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å –∞–∫—Ü–∏–∏ "
    "–ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ç @ryanair_deals_bot. –ù–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö —ç–º–æ–¥–∑–∏. –Ø–∑—ã–∫ —Ç–æ—Ç –∂–µ, —á—Ç–æ "
    "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —á–∞—Ç–µ."
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%d.%m.%Y %H:%M:%S",
)
log = logging.getLogger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def now() -> datetime:
    return datetime.now(tz=KYIV)


def gen_msg() -> str:
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": PROMPT_SYSTEM},
            {"role": "user", "content": PROMPT_USER},
        ],
        temperature=0.9,
        max_tokens=60,
    )
    return resp.choices[0].message.content.strip()


def load_cfg() -> dict:
    with open(ROOT / "config.json", encoding="utf-8") as f:
        return json.load(f)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def run_once() -> bool:
    """–ü—Ä–æ–±—É–µ–º –ø–∏—Å–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—Ö–∞. –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É–¥–∞—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ‚Äî –ø–∞—É–∑–∞."""
    cfg = load_cfg()
    cd_min, cd_max = cfg.get("cooldown_range", [24, 24])

    account = random.choice(cfg["accounts"])
    log.info("ü§ñ –†–∞–±–æ—Ç–∞—é –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º: %s", account.get("name", account["phone"]))

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if account.get("session"):
        client = TelegramClient(
            StringSession(account["session"]),
            account["api_id"], account["api_hash"]
        )
        await client.connect()
        if not await client.is_user_authorized():
            raise RuntimeError("‚ùå StringSession –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –æ–±–Ω–æ–≤–∏ config.json.")
    else:
        client = TelegramClient(
            SESS_DIR / f"{account['name']}.session",
            account["api_id"], account["api_hash"]
        )
        await client.start(phone=account["phone"])

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–î –∏ —Ç–∞–±–ª–∏—Ü–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite3.connect(DB_PATH)
    cur = db.cursor()
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS channels (
        id           INTEGER PRIMARY KEY AUTOINCREMENT,
        username     TEXT UNIQUE COLLATE NOCASE,
        type         TEXT DEFAULT 'group',
        next_allowed TEXT
    );
    """)
    db.commit()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ü–∏–∫–ª ¬´–ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    while True:
        row = cur.execute("""
            SELECT * FROM channels
            WHERE type IN ('group','comment')
              AND (next_allowed IS NULL OR next_allowed < datetime('now'))
            ORDER BY RANDOM()
            LIMIT 1
        """).fetchone()

        if not row:
            log.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥—Ä—É–ø–ø: –±–∞–∑–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –≤—Å–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ.")
            await client.disconnect()
            db.close()
            return False

        uname = row["username"]
        log.info("–ü—Ä–æ–±—É—é –ø–∏—Å–∞—Ç—å –≤ @%s ‚Ä¶", uname)

        try:
            try:
                await client(JoinChannelRequest(uname))   # –≤–¥—Ä—É–≥ –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å
            except Exception:
                pass

            text = gen_msg()
            await client.send_message(uname, f"{text} {WATERMARK}")
            log.info("‚úî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", text)

            # —Å—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
            pause_h = random.randint(cd_min, cd_max)
            next_ts = (now() + timedelta(hours=pause_h)).isoformat()
            cur.execute("UPDATE channels SET next_allowed=? WHERE id=?",
                        (next_ts, row["id"]))
            db.commit()

            await client.disconnect()
            db.close()
            return True

        except (ChatWriteForbiddenError, ChatAdminRequiredError):
            # –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å ‚Äî –ø–æ–º–µ—á–∞–µ–º readonly –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
            log.warning("üö´ –í @%s –ø–∏—Å–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –ø–æ–º–µ—á–∞—é readonly", uname)
            cur.execute("UPDATE channels SET type='readonly' WHERE id=?", (row["id"],))
            db.commit()
            # —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ‚Üí –±–µ—Ä—ë–º –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª

        except Exception as e:
            log.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ @%s: %s", uname, e)
            # –Ω–µ –º–µ—Ç–∏–º readonly, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑
            await asyncio.sleep(2)  # –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∫—Ä—É—Ç–∏—Ç—å—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ standalone –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    asyncio.run(run_once())
