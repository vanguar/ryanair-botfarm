# core/chatter.py
"""
–ë–æ—Ç-¬´—Ñ–µ—Ä–º–∞¬ª: –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –ø–∏—à–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø–æ–º–µ—á–∞–µ—Ç –∏—Ö
–Ω–µ–≤–∏–¥–∏–º—ã–º –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º –ª–µ–≥–∫–æ –∏—Å–∫–∞—Ç—å.

‚ñ™Ô∏é –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.
‚ñ™Ô∏é –í –ª–æ–≥ (stdout) –≤—ã–≤–æ–¥–∏—Ç—Å—è —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–Ω–∞–∫–∞, —á—Ç–æ–±—ã –ª–æ–≥–∏ –±—ã–ª–∏
  —á–∏—Ç–∞–µ–º—ã–º–∏ –∏ –±–µ–∑ ¬´–º—É—Å–æ—Ä–Ω—ã—Ö¬ª —Å–∏–º–≤–æ–ª–æ–≤.
‚ñ™Ô∏é –ê–∫–∫–∞—É–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ config.json ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
  –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥, –∫–æ–¥ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
"""

import os
import json
import sqlite3
import asyncio
import random
import logging
from datetime import datetime, timedelta

import pytz
from dotenv import load_dotenv
import openai
from telethon import TelegramClient
from telethon.errors import ChatWriteForbiddenError, ChatAdminRequiredError
from telethon.tl.functions.channels import JoinChannelRequest

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

openai.api_key  = os.getenv("OPENAI_API_KEY")
KYIV            = pytz.timezone("Europe/Kyiv")
WATERMARK       = "\u2060#x9f"                            # –Ω–µ–≤–∏–¥–∏–º—ã–π —Ç–µ–≥
DB_PATH         = "data/found_channels.db"
SESS_DIR        = os.getenv("SESS_DIR", "sessions")

PROMPT_SYSTEM = (
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –æ–±–æ–∂–∞–µ—à—å –¥–µ—à—ë–≤—ã–µ –ø–µ—Ä–µ–ª—ë—Ç—ã –∏ –¥–µ–ª–∏—à—å—Å—è "
    "–ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –≤ —á–∞—Ç–∞—Ö."
)
PROMPT_USER = (
    "–ù–∞–ø–∏—à–∏ –¥–æ 30 —Å–ª–æ–≤ –æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∞–≤–∏–∞–ø–µ—Ä–µ–ª—ë—Ç–∞—Ö. –£–ø–æ–º—è–Ω–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å –∞–∫—Ü–∏–∏ "
    "–ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ç @ryanair_deals_bot. –ù–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö —ç–º–æ–¥–∑–∏. –Ø–∑—ã–∫ —Ç–æ—Ç –∂–µ, —á—Ç–æ "
    "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —á–∞—Ç–µ."
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%d.%m.%Y %H:%M:%S",
)
log = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def now() -> datetime:
    return datetime.now(tz=KYIV)


def gen_msg() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ChatGPT."""
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": PROMPT_SYSTEM},
            {"role": "user", "content": PROMPT_USER},
        ],
        temperature=0.9,
        max_tokens=60,
    )
    return resp.choices[0].message.content.strip()


def load_cfg() -> dict:
    with open("config.json", encoding="utf-8") as f:
        return json.load(f)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def run_once() -> bool:
    """–û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥: –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ–±–Ω–æ–≤–∏—Ç—å –ë–î."""
    cfg = load_cfg()
    cd_min, cd_max = cfg.get("cooldown_range", [24, 24])

    # üîπ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
    account = random.choice(cfg["accounts"])
    log.info("ü§ñ –†–∞–±–æ—Ç–∞—é –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º: %s", account.get("name", account["phone"]))

    db = sqlite3.connect(DB_PATH)
    db.row_factory = sqlite3.Row
    cur = db.cursor()

    # –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª
    row = cur.execute(
        """
        SELECT * FROM channels
        WHERE type IN ('group','comment')
          AND (next_allowed IS NULL OR next_allowed < datetime('now'))
        ORDER BY RANDOM()
        LIMIT 1
        """
    ).fetchone()

    if not row:
        log.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥—Ä—É–ø–ø: –±–∞–∑–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –≤—Å–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ.")
        db.close()
        return False

    uname = row["username"]
    log.info("–ü—Ä–æ–±—É—é –ø–∏—Å–∞—Ç—å –≤ @%s ‚Ä¶", uname)

    client = TelegramClient(
        os.path.join(SESS_DIR, account["name"]),
        account["api_id"],
        account["api_hash"],
    )

    try:
        await client.start(phone=account["phone"])

        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç—É–ø–∏—Ç—å
        try:
            await client(JoinChannelRequest(uname))
        except Exception:
            pass

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text_clean = gen_msg()
        msg_send   = f"{text_clean} {WATERMARK}"       # —Å—é–¥–∞ –≤–∫–ª–µ–∏–≤–∞–µ–º –∑–Ω–∞–∫

        await client.send_message(uname, msg_send)
        log.info("‚úî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", text_clean)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
        pause_h = random.randint(cd_min, cd_max)
        next_ts = (now() + timedelta(hours=pause_h)).isoformat()

        cur.execute(
            "UPDATE channels SET next_allowed=? WHERE id=?",
            (next_ts, row["id"]),
        )
        db.commit()
        return True

    except (ChatWriteForbiddenError, ChatAdminRequiredError):
        log.warning("üö´ –í @%s –ø–∏—Å–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –ø–æ–º–µ—á–∞—é readonly", uname)
        cur.execute("UPDATE channels SET type='readonly' WHERE id=?", (row["id"],))
        db.commit()
        return False

    except Exception as e:
        log.error("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ @%s: %s", uname, e)
        return False

    finally:
        await client.disconnect()
        db.close()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ standalone –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    asyncio.run(run_once())
