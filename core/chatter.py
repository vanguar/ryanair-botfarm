"""
–ö–æ–º–º–µ–Ω—Ç-–±–æ—Ç: –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∫–∞–Ω–∞–ª—ã, –ø–∏—à–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç, –º–µ—Ç–∏—Ç –Ω–µ–≤–∏–¥–∏–º—ã–º
WATERMARK (U+2060#x9f). –í –æ–¥–Ω–æ–º –ø—Ä–æ—Ö–æ–¥–µ –∏–¥—ë—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º, –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç
—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ –∏—Å—á–µ—Ä–ø–∞–µ—Ç –±–∞–∑—É. –ê–∫–∫–∞—É–Ω—Ç –±–µ—Ä—ë—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏–∑ config.json.
"""

import os
import json
import sqlite3
import asyncio
import random
import logging
from datetime import datetime, timedelta

import pytz
from dotenv import load_dotenv
import openai
from telethon import TelegramClient
from telethon.errors import ChatWriteForbiddenError, ChatAdminRequiredError
from telethon.tl.functions.channels import JoinChannelRequest
from pathlib import Path
from telethon.sessions import StringSession

# ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
KYIV           = pytz.timezone("Europe/Kyiv")
WATERMARK      = "\u2060#x9f"
DB_PATH        = "data/found_channels.db"
ROOT = Path(__file__).resolve().parent.parent          # /app
SESS_DIR = os.getenv("SESS_DIR", str(ROOT / "sessions"))
Path(SESS_DIR).mkdir(parents=True, exist_ok=True)


# –≤–∫–ª—é—á–∏—Ç—å RPC-—Ç—Ä–µ–π—Å—ã Telethon, –µ—Å–ª–∏ TG_DEBUG=1
if os.getenv("TG_DEBUG", "").lower() in {"1", "true", "yes"}:
    logging.getLogger("telethon").setLevel(logging.DEBUG)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%d.%m.%Y %H:%M:%S",
)
log = logging.getLogger(__name__)

PROMPT_SYSTEM = (
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –æ–±–æ–∂–∞–µ—à—å –¥–µ—à—ë–≤—ã–µ –ø–µ—Ä–µ–ª—ë—Ç—ã –∏ –¥–µ–ª–∏—à—å—Å—è —Å–æ–≤–µ—Ç–∞–º–∏."
)
PROMPT_USER = (
    "–ù–∞–ø–∏—à–∏ –¥–æ 30 —Å–ª–æ–≤ –æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∞–≤–∏–∞–ø–µ—Ä–µ–ª—ë—Ç–∞—Ö. –£–ø–æ–º—è–Ω–∏ –±–æ—Ç @ryanair_deals_bot, "
    "‚â§2 —ç–º–æ–¥–∑–∏, —è–∑—ã–∫ —Ç–æ—Ç –∂–µ, —á—Ç–æ –≤ —á–∞—Ç–µ."
)

# ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def now() -> datetime:
    return datetime.now(tz=KYIV)


def gen_msg() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ChatGPT."""
    rsp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": PROMPT_SYSTEM},
            {"role": "user",   "content": PROMPT_USER},
        ],
        temperature=0.9,
        max_tokens=60,
    )
    return rsp.choices[0].message.content.strip()


def load_cfg() -> dict:
    with open("config.json", encoding="utf-8") as f:
        return json.load(f)


# ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def run_once() -> bool:
    """–ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∫–∞–Ω–∞–ª—ã, –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ—Å—Ç–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–µ –∏—Å—á–µ—Ä–ø–∞–µ—Ç –±–∞–∑—É)."""
    cfg = load_cfg()
    cd_min, cd_max = cfg.get("cooldown_range", [24, 24])

    account = random.choice(cfg["accounts"])
    log.info("ü§ñ –†–∞–±–æ—Ç–∞—é –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º: %s", account.get("name", account["phone"]))

    db = sqlite3.connect(DB_PATH)
    db.row_factory = sqlite3.Row
    cur = db.cursor()

    if account.get("session"):
        client = TelegramClient(
            StringSession(account["session"]),
            account["api_id"],
            account["api_hash"],
        )
    else:
        client = TelegramClient(
            os.path.join(SESS_DIR, account["name"]),
            account["api_id"],
            account["api_hash"],
        )


    await client.start(phone=account["phone"])

    try:
        while True:
            # –±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–∞–ª –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞
            row = cur.execute(
                """
                SELECT * FROM channels
                WHERE type IN ('group','comment')
                  AND (next_allowed IS NULL OR next_allowed < datetime('now'))
                ORDER BY RANDOM()
                LIMIT 1
                """
            ).fetchone()

            if not row:
                log.warning("–ö–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.")
                return False

            uname = row["username"]
            log.info("–ü—Ä–æ–±—É—é –ø–∏—Å–∞—Ç—å –≤ @%s ‚Ä¶", uname)

            # –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
            try:
                await client(JoinChannelRequest(uname))
            except Exception:
                pass  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

            try:
                text = gen_msg()
                to_send = f"{text} {WATERMARK}"
                msg = await client.send_message(uname, to_send)
                log.info("‚úî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (msg_id=%s): %s", msg.id, text)

                # —Å—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –∏ –≤—ã—Ö–æ–¥–∏–º
                pause_h = random.randint(cd_min, cd_max)
                next_ts = (now() + timedelta(hours=pause_h)).isoformat()
                cur.execute(
                    "UPDATE channels SET next_allowed=? WHERE id=?",
                    (next_ts, row["id"]),
                )
                db.commit()
                return True

            except (ChatWriteForbiddenError, ChatAdminRequiredError):
                log.warning("üö´ –í @%s –ø–∏—Å–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –ø–æ–º–µ—á–∞—é readonly", uname)
                cur.execute(
                    "UPDATE channels SET type='readonly' WHERE id=?", (row["id"],)
                )
                db.commit()
                # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª ‚Äî –±–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª

            except Exception as e:
                log.error("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ @%s: %s", uname, e)
                return False

    finally:
        await client.disconnect()
        db.close()


# ‚îÄ‚îÄ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    asyncio.run(run_once())
